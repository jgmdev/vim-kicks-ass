"       (_)               | |  (_)    | |
" __   ___ _ __ ___ ______| | ___  ___| | _____ ______ __ _ ___ ___
" \ \ / / | '_ ` _ \______| |/ / |/ __| |/ / __|______/ _` / __/ __|
"  \ V /| | | | | | |     |   <| | (__|   <\__ \     | (_| \__ \__ \
"   \_/ |_|_| |_| |_|     |_|\_\_|\___|_|\_\___/      \__,_|___/___/
"
"          .vimrc used by jgmdev (github.com/jgmdev)
"
"          -- based on template/vimrc
"          -- based on template/vimrc.kibs

" make sure we are in full Vim mode
set nocompatible

" enable filetype specific plugins
filetype on
filetype plugin on
filetype indent off " disable annoying auto indentation

" for configuration
let vim_path=expand('<sfile>:p:h')."/.vim"
let $VIMHOME=vim_path

" -------------------------------------------------------
" CHECK REQUIRED DEPENDENCIES
" -------------------------------------------------------
if !executable("git")
  echo "Remember to install git."
endif

if !executable("ctags") && !executable("phpctags")
  echo "Remember to install phpctags or ctags for autocomplete support."
endif

if !executable("fzf") || !executable("rg")
  echo "Remember to install fzf and ripgrep for file searching."
endif

" -------------------------------------------------------
" LOAD PLUGINS
" -------------------------------------------------------
call vim_kicks_ass#with_plugins([
  \ "misc", "easytags", "taglist",
  \ "l9", "autocomplpop", "syntastic",
  \ "fugitive", "autoclose", "markdown",
  \ "html5", "nerdcommenter", "tabular",
  \ "closetag", "detectindent", "junegunn/fzf.vim",
  \ "itchyny/lightline.vim", "scrooloose/nerdtree",
  \ "sheerun/vim-polyglot", "jcommenter", "endwise",
  \ "ap/vim-css-color"
  \ ])

" -------------------------------------------------------
" PLUGIN SETTINGS
" -------------------------------------------------------

" autocomplpop options
let g:acp_mappingDriven = 1 " don't autocomplete on backspace
let g:acp_completeoptPreview = 1 " display function arguments preview
let g:acp_behaviorKeywordLength = 1 " keyword autocomplete with 1 character

" easytags option
let g:easytags_cmd = 'ctags'
let g:easytags_syntax_keyword = 'auto' " Use auto or always (faster)
let g:easytags_auto_update = 1 " automatically generate tags while coding
let g:easytags_auto_highlight = 0 " can affect performance
let g:easytags_async = 1
if !isdirectory(vim_path."/typetags")
  call mkdir(vim_path."/typetags", "p")
endif
set tags=./tags; " project tags file
let g:easytags_dynamic_files = 1 " use project tags file if available
let g:easytags_file = vim_path."/tags"
let g:easytags_by_filetype = vim_path."/typetags" " generate tag files by file type
" enable tag recursion if inside a repository
let git_repo = isdirectory(getcwd().'/'.".git")
let fossil_repo = file_readable(getcwd().'/'.".fslckout")
if git_repo || fossil_repo
  let g:easytags_autorecurse = 1
  echo 'Recursive tags scanning enabled.'
endif

" syntastic options
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1

" detectindent options
let g:detectindent_preferred_expandtab = 1
let g:detectindent_preferred_indent = 4
let g:detectindent_preferred_when_mixed = 1

" lightline options
let g:lightline = {
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['readonly', 'filename', 'modified'],
  \     ['syntastic', 'gitbranch']
  \   ],
  \   'right': [
  \     ['lineinfo'],
  \     ['percent'],
  \     ['fileformat', 'fileencoding', 'filetype']
  \   ]
  \ },
  \ 'component_function': {
  \   'gitbranch': "fugitive#statusline",
  \   'syntastic': "SyntasticStatuslineFlag"
  \ }
  \ }

" fix: some weird issues with arrowkeys using autoclose in console
if !has("gui_running")
    let g:AutoClosePreservDotReg = 0
endif

" -------------------------------------------------------
" LOAD PRESETS
" -------------------------------------------------------
call vim_kicks_ass#using_presets([
  \ 'php', 'javascript'
  \ ])

" -------------------------------------------------------
" LOAD COLORSCHEMES
" -------------------------------------------------------
call vim_kicks_ass#using_colorschemes([
  \ "jellybeans", "molokai", "joshdick/onedark.vim",
  \ ])

" -------------------------------------------------------
" EDITOR OPTIONS
" -------------------------------------------------------

" create the swap files directory
if !isdirectory(vim_path."/swap")
  call mkdir(vim_path."/swap", "p")
endif

syntax on
colorscheme onedark
set t_Co=256 " enable more colors for schemes that require them.
set ff=unix
set nowrap
set directory=$VIMHOME/swap//
"set backspace=indent,eol,start
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set copyindent
set shiftround
set smartindent
set smarttab
set undolevels=100000
set number             " linenumbering
set laststatus=2       " always show statusline
set hlsearch
set cursorline
set relativenumber
set colorcolumn=81     " right margin position
set mouse=a            " enable mouse
set completeopt=menuone,longest,popup,noselect,noinsert

" -------------------------------------------------------
" KEY BINDINGS
" -------------------------------------------------------
let mapleader = '\'
let maplocalleader = ','

" show list of symbols
nnoremap <LocalLeader>l :TlistToggle<CR>
" goto definition
nnoremap <LocalLeader>j <C-]>
nnoremap <LocalLeader>jh <C-W><C-]>
nnoremap <C-LeftMouse> <C-]>
nnoremap <C-RightMouse> <C-W><C-]>
" comment/uncomment
nnoremap <LocalLeader>c :call NERDComment(0, "toggle")<CR>
vnoremap <LocalLeader>c :call NERDComment(1, "toggle")<CR>
inoremap <LocalLeader>c :call NERDComment(0, "toggle")<CR>
" generate php doc block
nnoremap <LocalLeader>d :call JCommentWriter()<CR>
nnoremap <LocalLeader>D :call PhpDoc()<CR>
nnoremap <LocalLeader>e :Explore<CR>
" tabs navigation previous/next
nnoremap <LocalLeader>[ :tabp<CR>
nnoremap <LocalLeader>] :tabn<CR>
" save/quit
nnoremap <LocalLeader>s :w<CR>
nnoremap <LocalLeader>sq :wq<CR>
nnoremap <LocalLeader>q :q<CR>
" shift tab unindent
nnoremap <Tab> >>
nnoremap <S-Tab> <<
inoremap <S-Tab> <C-d>
" bind omnicomplete to CTRL+Space (doesn't works)
inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
  \ "\<lt>C-n>" :
  \ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
  \ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
  \ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
inoremap <C-@> <C-Space>
" search files/content
nnoremap <LocalLeader>f :Files<CR>
nnoremap <LocalLeader>F :Rg<Space>
" toggle search highlight
nnoremap <LocalLeader>h :set hlsearch!<cr>
" display directory tree (use o to collapse/uncollapse)
nnoremap <LocalLeader>t :NERDTreeToggle<CR>
" php bindings
nnoremap <Leader>f :call PhpCsFixerFixFile()<CR>

" -------------------------------------------------------
" AUTO COMMANDS
" -------------------------------------------------------
autocmd BufWritePre * :%s/\s\+$//e " strip trailing spaces
autocmd BufWritePre * :retab " convert tabs to spaces
autocmd BufReadPost * :DetectIndent
